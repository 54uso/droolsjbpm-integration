
package org.kie.remote.services.ws.command.generated;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "CommandServiceBasicAuth", targetNamespace = "http://services.remote.kie.org/6.5.1.1/command", wsdlLocation = "file:///wsdl/CommandService.wsdl")
public class CommandServiceBasicAuthClient
    extends Service
{

    private final static URL COMMANDSERVICEBASICAUTH_WSDL_LOCATION;
    private final static WebServiceException COMMANDSERVICEBASICAUTH_EXCEPTION;
    private final static QName COMMANDSERVICEBASICAUTH_QNAME = new QName("http://services.remote.kie.org/6.5.1.1/command", "CommandServiceBasicAuth");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("file:///wsdl/CommandService.wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        COMMANDSERVICEBASICAUTH_WSDL_LOCATION = url;
        COMMANDSERVICEBASICAUTH_EXCEPTION = e;
    }

    public CommandServiceBasicAuthClient() {
        super(__getWsdlLocation(), COMMANDSERVICEBASICAUTH_QNAME);
    }

    public CommandServiceBasicAuthClient(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    /**
     * 
     * @return
     *     returns CommandWebService
     */
    @WebEndpoint(name = "CommandServiceBasicAuthPort")
    public CommandWebService getCommandServiceBasicAuthPort() {
        return super.getPort(new QName("http://services.remote.kie.org/6.5.1.1/command", "CommandServiceBasicAuthPort"), CommandWebService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CommandWebService
     */
    @WebEndpoint(name = "CommandServiceBasicAuthPort")
    public CommandWebService getCommandServiceBasicAuthPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://services.remote.kie.org/6.5.1.1/command", "CommandServiceBasicAuthPort"), CommandWebService.class, features);
    }

    private static URL __getWsdlLocation() {
        if (COMMANDSERVICEBASICAUTH_EXCEPTION!= null) {
            throw COMMANDSERVICEBASICAUTH_EXCEPTION;
        }
        return COMMANDSERVICEBASICAUTH_WSDL_LOCATION;
    }

}
